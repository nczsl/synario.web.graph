export declare const PI: number;
export declare const MATRIX4F_SIZE: number;
export declare const MATRIX3F_SIZE: number;
export declare class Vector {
    buffer: Float32Array;
    constructor(buffer: Float32Array);
    ToString(): string;
    get x(): number;
    get y(): number;
    get z(): number;
    get w(): number;
    set x(value: number);
    set y(value: number);
    set z(value: number);
    set w(value: number);
    get r(): number;
    get g(): number;
    get b(): number;
    get a(): number;
    set r(value: number);
    set g(value: number);
    set b(value: number);
    set a(value: number);
    Equals(v: Vector): boolean;
    Reset(...values: number[]): void;
    get len(): number;
    Length(): number;
    Normalize(): void;
    Clone<TVector extends Vector>(): TVector;
    static FromXY(x: number, y: number): Vector2;
    static FromXYZ(x: number, y: number, z: number): Vector3;
    static FromXYZW(x: number, y: number, z: number, w: number): Vector4;
    static FromRGB(r: number, g: number, b: number): Vector3;
    static FromRGBA(r: number, g: number, b: number, a: number): Vector4;
    static FromArray<TVector extends Vector>(arr: number[]): TVector;
    static Dot(a: Vector, b: Vector): number;
    EqualsTolerance(v: Vector, epsilon?: number): boolean;
    static Perpendicular(a: Vector2): Vector2;
    static Add(a: Vector, b: Vector): Vector;
    static Subtract(a: Vector, b: Vector): Vector;
    static Normalize(v: Vector): Vector;
}
export declare class Vector2 extends Vector {
    constructor(buffer?: Float32Array);
    static len: number;
    static Zero(): Vector2;
    static One(): Vector2;
    Abs(): Vector2;
    Negate(): Vector2;
    Sum(): number;
    Average(): number;
    static Distance(a: Vector2, b: Vector2): number;
    static Lerp(a: Vector2, b: Vector2, t: number): Vector2;
    static MultiplyScalar(v: Vector2, scalar: number): Vector2;
    static Transform(left: Matrix3, x: Vector2): Vector2;
}
export declare class Vector3 extends Vector {
    constructor(buffer?: Float32Array);
    static len: number;
    static Zero(): Vector3;
    static One(): Vector3;
    Abs(): Vector3;
    Negate(): Vector3;
    Sum(): number;
    Average(): number;
    static Cross(a: Vector3, b: Vector3): Vector3;
    static Distance(a: Vector3, b: Vector3): number;
    static Lerp(a: Vector3, b: Vector3, t: number): Vector3;
    static Transform(left: Matrix4, x: Vector3): Vector3;
    static GetForward(): Vector3;
    static GetBack(): Vector3;
    static GetUp(): Vector3;
    static GetDown(): Vector3;
    static GetRight(): Vector3;
    static GetLeft(): Vector3;
}
export declare class Vector4 extends Vector {
    constructor(buffer?: Float32Array);
    static len: number;
    static Zero(): Vector4;
    static One(): Vector4;
    Abs(): Vector4;
    Negate(): Vector4;
    Sum(): number;
    Average(): number;
    static Distance(a: Vector4, b: Vector4): number;
    static Lerp(a: Vector4, b: Vector4, t: number): Vector4;
    static Transform(left: Matrix4, x: Vector4): Vector4;
}
export declare class Matrix {
    buffer: Float32Array;
    row: number;
    col: number;
    static length: number;
    constructor(buffer: Float32Array);
    ToString(): string;
    GetByIndex(row: number, col: number): number;
    SetByIndex(row: number, col: number, value: number): void;
    GetRow(rowNo: number): Iterable<number>;
    GetCol(colNo: number): Iterable<number>;
    GetRowVector<TVector extends Vector>(rowNo: number): TVector;
    GetColVector<TVector extends Vector>(colNo: number): TVector;
    SetRow(rowNo: number, v: Vector): void;
    SetCol(colNo: number, v: Vector): void;
    Transpose<TMatrix extends Matrix>(): TMatrix;
    Clone<TMatrix extends Matrix>(): TMatrix;
    Invert<TMatrix extends Matrix>(): TMatrix;
}
export declare class Matrix4 extends Matrix {
    constructor(buffer?: Float32Array);
    static readonly LENGTH: number;
    Invert<TMatrix extends Matrix>(): TMatrix;
    get Delta(): number;
    static FromArray(arr: number[]): Matrix4;
    static Multiply(left: Matrix4, right: Matrix4): Matrix4;
    Multiply(other: Matrix4): void;
    Add(other: Matrix4): void;
    Subtract(other: Matrix4): void;
    Scalar(scalar: number): void;
    static Identity(): Matrix4;
    static LookAt(eye: Vector3, center: Vector3, up: Vector3): Matrix4;
    static Perspective(angle: number, aspect: number, near: number, far: number): Matrix4;
    static Viewport(x: number, y: number, width: number, height: number, depth: number): Matrix4;
    static RotationX(angle: number): Matrix4;
    RotateX(angle: number): void;
    RotateY(angle: number): void;
    RotateZ(angle: number): void;
    RotateAxis(axis: Float32Array, angle: number): void;
    static RotationY(angle: number): Matrix4;
    static RotationZ(angle: number): Matrix4;
    static RotationAxis(axis: Float32Array, angle: number): Matrix4;
    static Translation(x: number, y: number, z: number): Matrix4;
    Translate(x: number, y: number, z: number): void;
    static MultiplyAll(matrices: Matrix4[]): Matrix4;
    MultiplyChain(other: Matrix4): this;
    static FromQuaternion(q: Quaternion): Matrix4;
}
export declare class Matrix3 extends Matrix {
    constructor(buffer?: Float32Array);
    static readonly LENGTH: number;
    get Delta(): number;
    Invert<TMatrix extends Matrix>(): TMatrix;
    static FromArray(arr: number[]): Matrix3;
    static Identity(): Matrix3;
    static Multiply(left: Matrix3, right: Matrix3): Matrix3;
    Multiply(other: Matrix3): void;
    Add(other: Matrix3): void;
    Subtract(other: Matrix3): void;
    Scalar(scalar: number): void;
    Translate(x: number, y: number): void;
    RotateX(angle: number): void;
    RotateY(angle: number): void;
    RotateAxis(axis: Float32Array, angle: number): void;
    static RotationX(angle: number): Matrix3;
    static RotationY(angle: number): Matrix3;
    static RotationAxis(axis: Float32Array, angle: number): Matrix3;
    static Translation(x: number, y: number): Matrix3;
    static Scale(x: number, y: number): Matrix3;
    static MultiplyAll(matrices: Matrix3[]): Matrix3;
}
export declare class Quaternion {
    buffer: Float32Array;
    constructor(x?: number | Float32Array, y?: number, z?: number, w?: number);
    get x(): number;
    set x(value: number);
    get y(): number;
    set y(value: number);
    get z(): number;
    set z(value: number);
    get w(): number;
    set w(value: number);
    static Identity(): Quaternion;
    static FromXYZW(x: number, y: number, z: number, w: number): Quaternion;
    static FromAxisAngle(axis: Vector3, angle: number): Quaternion;
    static FromEulerAngles(x: number, y: number, z: number): Quaternion;
    static Length(q: Quaternion): number;
    static Normalize(q: Quaternion): Quaternion;
    static Conjugate(q: Quaternion): Quaternion;
    static Inverse(q: Quaternion): Quaternion;
    static Multiply(a: Quaternion, b: Quaternion): Quaternion;
    static Slerp(a: Quaternion, b: Quaternion, t: number): Quaternion;
    static ToMatrix4(q: Quaternion): Matrix4;
    static FromMatrix4(m: Matrix4): Quaternion;
}
