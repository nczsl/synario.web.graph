import * as gmath_mod from "./gmath";
import * as types_mod from "./types";
import * as scenery_mod from './scenery';
import * as store_mod from './store';
export declare class MeshRes {
    caseBufferId: types_mod.Id;
    vertexBufferId: types_mod.Id;
    indexBufferId: types_mod.Id;
    indirectDrawBufferId: types_mod.Id;
    indirectIndexDrawBufferId: types_mod.Id;
    indirectWorkdispatchBufferId: types_mod.Id;
    targetTextureId: types_mod.Id;
    gosTextureId: types_mod.Id;
    OutBufferId: types_mod.Id;
    gosBufferId: types_mod.Id;
    rsBindGroupId: types_mod.Id;
    rsBindGroupLayoutId: types_mod.Id;
    csBindGroupId1: types_mod.Id;
    csBindGroupLayoutId1: types_mod.Id;
    csBindGroupId2: types_mod.Id;
    csBindGroupLayoutId2: types_mod.Id;
    csBindGroupId3: types_mod.Id;
    csBindGroupLayoutId3: types_mod.Id;
    get caseBuffer(): GPUBuffer | undefined;
    get vertexBuffer(): GPUBuffer | undefined;
    get indexBuffer(): GPUBuffer | undefined;
    get indirectDrawBuffer(): GPUBuffer | undefined;
    get indirectIndexDrawBuffer(): GPUBuffer | undefined;
    get indirectWorkdispatchBuffer(): GPUBuffer | undefined;
    get targetTexture(): GPUTexture | undefined;
    get gosTexture(): GPUTexture | undefined;
    get OutBuffer(): GPUBuffer | undefined;
    get gosBuffer(): GPUBuffer | undefined;
    get rsBindGroup(): GPUBindGroup | undefined;
    get rsBindGroupLayout(): GPUBindGroupLayout | undefined;
    get csBindGroup1(): GPUBindGroup | undefined;
    get csBindGroupLayout1(): GPUBindGroupLayout | undefined;
    get csBindGroup2(): GPUBindGroup | undefined;
    get csBindGroupLayout2(): GPUBindGroupLayout | undefined;
    get csBindGroup3(): GPUBindGroup | undefined;
    get csBindGroupLayout3(): GPUBindGroupLayout | undefined;
    colorTargetStates: GPUColorTargetState[];
    colorAttachments: GPURenderPassColorAttachment[];
    depthStencilAttachment: GPURenderPassDepthStencilAttachment;
    get activeRenderViews(): GPUTextureView[];
    caseData: ArrayBuffer;
    vertexData: Float32Array;
    indexData: Uint32Array;
    indirectDrawData: Uint32Array;
    indirectIndexDrawData: Uint32Array;
    indirectWorkdispatchData: Uint32Array;
    gosData: ArrayBuffer;
    vertexLayout: GPUVertexBufferLayout | null;
    instanceLayout: GPUVertexBufferLayout | null;
    gosTextureSize: gmath_mod.Vector2;
    store: store_mod.Store;
    constructor(store: store_mod.Store);
}
export declare class Gobj {
    id: types_mod.Id;
    parentId: types_mod.Id;
    label: string;
    modelMatrix: gmath_mod.Matrix4;
    localMatrix: gmath_mod.Matrix4;
    position: gmath_mod.Vector3;
    rotation: gmath_mod.Quaternion;
    scale: gmath_mod.Vector3;
    center: gmath_mod.Vector3;
    redius: GPUSize32;
    vertexLocation: GPUIndex32;
    vertexCount: GPUSize32;
    indexLocation: GPUIndex32;
    indexCount: GPUSize32;
    instanceLocation: GPUIndex32;
    instanceCount: GPUSize32;
    materialId: types_mod.Id;
    childen: Gobj[];
    static get BYTESIZE(): GPUSize32;
    constructor(id?: types_mod.Id, label?: string);
}
export declare class Scene {
    id: types_mod.Id;
    label: string;
    meshRes: MeshRes | null;
    gobjs: Gobj[];
    owner: scenery_mod.Scenery | null;
    private _resourceFlags;
    private _attachmentFlags;
    private drawMode;
    get resourceFlags(): number;
    get attachmentFlags(): number;
    constructor(owner: scenery_mod.Scenery, vertexLayout?: GPUVertexBufferLayout | null);
    private _appendInstance;
    private _appendIndirectDrawData;
    private _appendIndirectIndexDrawData;
    add10(vertexData: Float32Array, instanceCount?: GPUSize32): Gobj;
    add11(vertexData: Float32Array, modelmatrix: gmath_mod.Matrix4, instanceCount?: GPUSize32): Gobj;
    add12(vertexData: Float32Array, modelmatrix: gmath_mod.Matrix4, center: gmath_mod.Vector4, redius: GPUSize32, instanceCount?: GPUSize32): Gobj;
    add13(vertexData: Float32Array, modelmatrix: gmath_mod.Matrix4, materialId: types_mod.Id, instanceCount?: GPUSize32): Gobj;
    add14(vertexData: Float32Array, modelmatrix: gmath_mod.Matrix4, center: gmath_mod.Vector4, redius: GPUSize32, materialId: types_mod.Id, instanceCount?: GPUSize32): Gobj;
    add20(vertexData: Float32Array, indexData: Uint32Array, instanceCount?: GPUSize32): Gobj;
    add21(vertexData: Float32Array, indexData: Uint32Array, modelmatrix: gmath_mod.Matrix4, instanceCount?: GPUSize32): Gobj;
    add22(vertexData: Float32Array, indexData: Uint32Array, modelmatrix: gmath_mod.Matrix4, center: gmath_mod.Vector4, redius: GPUSize32, instanceCount?: GPUSize32): Gobj;
    add23(vertexData: Float32Array, indexData: Uint32Array, modelmatrix: gmath_mod.Matrix4, materialId: types_mod.Id, instanceCount?: GPUSize32): Gobj;
    add24(vertexData: Float32Array, indexData: Uint32Array, modelmatrix: gmath_mod.Matrix4, center: gmath_mod.Vector4, redius: GPUSize32, materialId: types_mod.Id, instanceCount?: GPUSize32): Gobj;
    private setResource;
    hasResource(flag: types_mod.ScenResource): boolean;
    private setAttachment;
    hasAttachment(flag: types_mod.ScenAttachment): boolean;
    getEnabledResourceFlags(): types_mod.ScenResource[];
    getEnabledAttachmentFlags(): types_mod.ScenAttachment[];
    registerResources(): void;
    createCsVertexIndexBindGroup(vertexType?: 'read-only-storage' | 'storage', indexType?: 'read-only-storage' | 'storage'): void;
    createCsGosTextureBindGroup(sampleType?: GPUTextureSampleType, viewType?: GPUTextureViewDimension): void;
    createCsExtraBindGroup(caseType?: 'read-only-storage' | 'storage', indirectDrawType?: 'storage', indirectIndexType?: 'storage', indirectWorkType?: 'storage', outBufferType?: 'storage'): void;
    createRsBindGroup(sampleType?: GPUTextureSampleType, viewType?: GPUTextureViewDimension): void;
    setcaseData(data: ArrayBuffer): void;
    setGosTexture(images: ImageBitmap[], format?: GPUTextureFormat): void;
    setGosTexture2(width: number, height: number, layers: number, format?: GPUTextureFormat): void;
    setOutBuffer(size?: number): void;
    setTargetTexture(width: GPUSize32, height: GPUSize32, colorTargetStatesHandler: types_mod.ColorStateHandler, colorAttachmentParamSettingHandler?: types_mod.ColorAttachmentParamSettingHandler, depthStencilAttachmentParamSettingHandler?: types_mod.DepthStencilAttachmentParamSettingHandler): void;
    setIndirectWorkdispatchData(data: number[] | Uint32Array): void;
}
